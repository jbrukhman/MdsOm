
//
// Code generated by script gen_map_set.
// Do not change here, change in script.
//
package com.jpmorgan.mds.mercury.jms;

import javax.jms.JMSException;
import javax.jms.MessageFormatException;

import com.wombat.mama.MamaException;
import com.wombat.mama.MamaFieldDescriptor;
import com.wombat.mama.MamaFieldTypeException;
import com.wombat.mama.MamaPrice;

public class MapMessageSetImpl {
	private MapMessageImpl impl = null;
		
	protected MapMessageSetImpl(MapMessageImpl impl) {
		this.impl = impl;
	} 

	/** byte
	 */
	public void setByte(String name, byte val) throws JMSException {
		MamaFieldDescriptor fd = null;
		try {
			fd = impl.checkFieldName(name);
			switch (fd.getType()) {
			case MamaFieldDescriptor.I8:
				impl.getMsg().addI8("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.U8:
				impl.getMsg().addU8("", fd.getFid(), (short) val);
				break;
			case MamaFieldDescriptor.I16:
				impl.getMsg().addI16("", fd.getFid(), (short) val);
				break;
			case MamaFieldDescriptor.U16:
				impl.getMsg().addU16("", fd.getFid(), (int) val);
				break;
			case MamaFieldDescriptor.I32:
				impl.getMsg().addI32("", fd.getFid(), (int) val);
				break;
			case MamaFieldDescriptor.U32:
				impl.getMsg().addU32("", fd.getFid(), (long) val);
				break;
			case MamaFieldDescriptor.I64:
				impl.getMsg().addI64("", fd.getFid(), (long) val);
				break;
			case MamaFieldDescriptor.U64:
				impl.getMsg().addU64("", fd.getFid(), (long) val);
				break;
			case MamaFieldDescriptor.F32:
				impl.getMsg().addF32("", fd.getFid(), (float) val);
				break;
			case MamaFieldDescriptor.F64:
				impl.getMsg().addF64("", fd.getFid(), (double) val);
				break;
			case MamaFieldDescriptor.STRING:
				impl.getMsg().addString("", fd.getFid(), String.valueOf(val));
				break;
			default:
				throw new MessageFormatException("setByte: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
			}
		} catch (MamaFieldTypeException e1) {
			throw new MessageFormatException("setByte: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
		} catch (MamaException e2) {
			throw new JMSException("setByte: error for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd) + " impl.getMsg()=" + e2.getMessage());
		}
	}

	/** short
	 */
	public void setShort(String name, short val) throws JMSException {
		MamaFieldDescriptor fd = null;
		try {
			fd = impl.checkFieldName(name);
			switch (fd.getType()) {
			case MamaFieldDescriptor.U8:
				impl.getMsg().addU8("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.I16:
				impl.getMsg().addI16("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.U16:
				impl.getMsg().addU16("", fd.getFid(), (int) val);
				break;
			case MamaFieldDescriptor.I32:
				impl.getMsg().addI32("", fd.getFid(), (int) val);
				break;
			case MamaFieldDescriptor.U32:
				impl.getMsg().addU32("", fd.getFid(), (long) val);
				break;
			case MamaFieldDescriptor.I64:
				impl.getMsg().addI64("", fd.getFid(), (long) val);
				break;
			case MamaFieldDescriptor.U64:
				impl.getMsg().addU64("", fd.getFid(), (long) val);
				break;
			case MamaFieldDescriptor.F32:
				impl.getMsg().addF32("", fd.getFid(), (float) val);
				break;
			case MamaFieldDescriptor.F64:
				impl.getMsg().addF64("", fd.getFid(), (double) val);
				break;
			case MamaFieldDescriptor.STRING:
				impl.getMsg().addString("", fd.getFid(), String.valueOf(val));
				break;
			default:
				throw new MessageFormatException("setShort: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
			}
		} catch (MamaFieldTypeException e1) {
			throw new MessageFormatException("setShort: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
		} catch (MamaException e2) {
			throw new JMSException("setShort: error for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd) + " impl.getMsg()=" + e2.getMessage());
		}
	}

	/** int
	 */
	public void setInt(String name, int val) throws JMSException {
		MamaFieldDescriptor fd = null;
		try {
			fd = impl.checkFieldName(name);
			switch (fd.getType()) {
			case MamaFieldDescriptor.U16:
				impl.getMsg().addU16("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.I32:
				impl.getMsg().addI32("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.U32:
				impl.getMsg().addU32("", fd.getFid(), (long) val);
				break;
			case MamaFieldDescriptor.I64:
				impl.getMsg().addI64("", fd.getFid(), (long) val);
				break;
			case MamaFieldDescriptor.U64:
				impl.getMsg().addU64("", fd.getFid(), (long) val);
				break;
			case MamaFieldDescriptor.F32:
				impl.getMsg().addF32("", fd.getFid(), (float) val);
				break;
			case MamaFieldDescriptor.F64:
				impl.getMsg().addF64("", fd.getFid(), (double) val);
				break;
			case MamaFieldDescriptor.STRING:
				impl.getMsg().addString("", fd.getFid(), String.valueOf(val));
				break;
			default:
				throw new MessageFormatException("setInt: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
			}
		} catch (MamaFieldTypeException e1) {
			throw new MessageFormatException("setInt: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
		} catch (MamaException e2) {
			throw new JMSException("setInt: error for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd) + " impl.getMsg()=" + e2.getMessage());
		}
	}

	/** long
	 */
	public void setLong(String name, long val) throws JMSException {
		MamaFieldDescriptor fd = null;
		try {
			fd = impl.checkFieldName(name);
			switch (fd.getType()) {
			case MamaFieldDescriptor.U32:
				impl.getMsg().addU32("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.I64:
				impl.getMsg().addI64("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.U64:
				impl.getMsg().addU64("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.F32:
				impl.getMsg().addF32("", fd.getFid(), (float) val);
				break;
			case MamaFieldDescriptor.F64:
				impl.getMsg().addF64("", fd.getFid(), (double) val);
				break;
			case MamaFieldDescriptor.STRING:
				impl.getMsg().addString("", fd.getFid(), String.valueOf(val));
				break;
			default:
				throw new MessageFormatException("setLong: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
			}
		} catch (MamaFieldTypeException e1) {
			throw new MessageFormatException("setLong: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
		} catch (MamaException e2) {
			throw new JMSException("setLong: error for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd) + " impl.getMsg()=" + e2.getMessage());
		}
	}

	/** float
	 */
	public void setFloat(String name, float val) throws JMSException {
		MamaFieldDescriptor fd = null;
		try {
			fd = impl.checkFieldName(name);
			switch (fd.getType()) {
			case MamaFieldDescriptor.F32:
				impl.getMsg().addF32("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.F64:
				impl.getMsg().addF64("", fd.getFid(), (double) val);
				break;
			case MamaFieldDescriptor.STRING:
				impl.getMsg().addString("", fd.getFid(), String.valueOf(val));
				break;
			default:
				throw new MessageFormatException("setFloat: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
			}
		} catch (MamaFieldTypeException e1) {
			throw new MessageFormatException("setFloat: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
		} catch (MamaException e2) {
			throw new JMSException("setFloat: error for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd) + " impl.getMsg()=" + e2.getMessage());
		}
	}

	/** double
	 */
	public void setDouble(String name, double val) throws JMSException {
		MamaFieldDescriptor fd = null;
		try {
			fd = impl.checkFieldName(name);
			switch (fd.getType()) {
			case MamaFieldDescriptor.F64:
				impl.getMsg().addF64("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.STRING:
				impl.getMsg().addString("", fd.getFid(), String.valueOf(val));
				break;
			case MamaFieldDescriptor.PRICE:
				MamaPrice mp = new MamaPrice();
				mp.setValue((double) val);
				impl.getMsg().addPrice("", fd.getFid(), mp);
				break;
			default:
				throw new MessageFormatException("setDouble: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
			}
		} catch (MamaFieldTypeException e1) {
			throw new MessageFormatException("setDouble: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
		} catch (MamaException e2) {
			throw new JMSException("setDouble: error for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd) + " impl.getMsg()=" + e2.getMessage());
		}
	}

	/** boolean
	 */
	public void setBoolean(String name, boolean val) throws JMSException {
		MamaFieldDescriptor fd = null;
		try {
			fd = impl.checkFieldName(name);
			switch (fd.getType()) {
			case MamaFieldDescriptor.BOOL:
				impl.getMsg().addBoolean("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.STRING:
				impl.getMsg().addString("", fd.getFid(), String.valueOf(val));
				break;
			default:
				throw new MessageFormatException("setBoolean: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
			}
		} catch (MamaFieldTypeException e1) {
			throw new MessageFormatException("setBoolean: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
		} catch (MamaException e2) {
			throw new JMSException("setBoolean: error for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd) + " impl.getMsg()=" + e2.getMessage());
		}
	}

	/** byte[]
	 */
	public void setBytes(String name, byte[] val) throws JMSException {
		MamaFieldDescriptor fd = null;
		try {
			fd = impl.checkFieldName(name);
			switch (fd.getType()) {
			case MamaFieldDescriptor.OPAQUE:
				impl.getMsg().addOpaque("", fd.getFid(), val);
				break;
			default:
				throw new MessageFormatException("setBytes: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
			}
		} catch (MamaFieldTypeException e1) {
			throw new MessageFormatException("setBytes: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
		} catch (MamaException e2) {
			throw new JMSException("setBytes: error for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd) + " impl.getMsg()=" + e2.getMessage());
		}
	}

	/** char
	 */
	public void setChar(String name, char val) throws JMSException {
		MamaFieldDescriptor fd = null;
		try {
			fd = impl.checkFieldName(name);
			switch (fd.getType()) {
			case MamaFieldDescriptor.CHAR:
				impl.getMsg().addChar("", fd.getFid(), val);
				break;
			case MamaFieldDescriptor.I8:
				impl.getMsg().addI8("", fd.getFid(), (byte) val);
				break;
			case MamaFieldDescriptor.U8:
				impl.getMsg().addU8("", fd.getFid(), (short) val);
				break;
			default:
				throw new MessageFormatException("setChar: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
			}
		} catch (MamaFieldTypeException e1) {
			throw new MessageFormatException("setChar: not valid for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd));
		} catch (MamaException e2) {
			throw new JMSException("setChar: error for topic=" + impl.getSymbol() + " field=" + name + " type=" + impl.getJmsTypeFromMamaType(fd) + " impl.getMsg()=" + e2.getMessage());
		}
	}
}

