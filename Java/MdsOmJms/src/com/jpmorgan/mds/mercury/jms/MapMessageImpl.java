package com.jpmorgan.mds.mercury.jms;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.MapMessage;
import javax.jms.MessageFormatException;
import javax.jms.Topic;

import com.jpmorgan.mds.mercury.helper.MdsOm.MdsOmEnvType;
import com.jpmorgan.mds.mercury.helper.MdsOmEnv;
import com.wombat.mama.MamaDateTime;
import com.wombat.mama.MamaException;
import com.wombat.mama.MamaFieldDescriptor;
import com.wombat.mama.MamaFieldTypeException;
import com.wombat.mama.MamaMsg;
import com.wombat.mama.MamaMsgField;
import com.wombat.mama.MamaPrice;

public class MapMessageImpl implements MapMessage {
	private MamaMsg msg = null;				// underlying OpenMAMA message
	private MdsOmEnv env = null;			// env that this message is for (TREP, SOLACE, etc)
	private Topic topic = null;				// The topic/symbol
	private MdsOmJmsConfig config = null;	// the current config
	private TopicSessionImpl session = null;
	
	// Class that is code-generated by script
	private MapMessageGetImpl gets;
	
	// Class that is code-generated by script
	private MapMessageSetImpl sets;
	
	protected MapMessageImpl() {
		gets = new MapMessageGetImpl(this);
		sets = new MapMessageSetImpl(this);
	}
	
	protected TopicSessionImpl getSession() {
		return session;
	}

	protected void setSession(TopicSessionImpl session) {
		this.session = session;
	}

	protected void setConfig(MdsOmJmsConfig config) {
		this.config = config;
	}
	
	protected MdsOmJmsConfig getConfig() {
		return config;
	}
	
	protected Topic getTopic() {
		return topic;
	}

	protected void setTopic(Topic topic) {
		this.topic = topic;
	}

	protected void setMamaMsg(MamaMsg msg) {
		this.msg = msg;
	}
	
	protected MamaMsg getMamaMsg() {
		return msg;
	}

	protected void setEnv(MdsOmEnv env) {
		this.env = env;
	}
	
	protected MdsOmEnv getEnv() {
		return env;
	}
	
	protected MamaMsg getMsg() {
		return msg;
	}
	
	protected int getNumFields() {
		return msg.getNumFields();	
	}
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		Enumeration<?> names;
		try {
			names = this.getMapNames();
			while (names.hasMoreElements()) {
				String name = (String)names.nextElement();
				String value = this.getString(name);
				builder.append(name + "=" + value + ",");
			}
		} catch (JMSException e) {
			e.printStackTrace();
		}
		
		return builder.substring(0, builder.length()-1);
	}

	protected void updateToNewEnv(MdsOmEnv newEnv) {
		try {
			MdsOmEnv oldEnv = env;
			MamaMsg newMsg = newEnv.getMamaMsg();		// from new env

			for (@SuppressWarnings("unchecked")
			Iterator<MamaMsgField> iterator = msg.iterator(); iterator.hasNext();) {
				MamaMsgField field = iterator.next();
				if (field == null) continue;
	
				MamaFieldDescriptor oldFd = oldEnv.getFieldDescriptor(field.getFid());
				MamaFieldDescriptor newFd = newEnv.getFieldDescriptor(oldFd.getName());

				// TODO may need to add support for MSG type and array types
				switch (oldFd.getType()) {
        		case MamaFieldDescriptor.OPAQUE: newMsg.addOpaque(newFd.getName(), newFd.getFid(), field.getOpaque()); break;
        		case MamaFieldDescriptor.STRING: newMsg.addString(newFd.getName(), newFd.getFid(), field.getString()); break;
        		case MamaFieldDescriptor.BOOL: newMsg.addBoolean(newFd.getName(), newFd.getFid(), field.getBoolean()); break;
        		case MamaFieldDescriptor.CHAR: newMsg.addChar(newFd.getName(), newFd.getFid(), field.getChar()); break;
        		case MamaFieldDescriptor.I8: newMsg.addI8(newFd.getName(), newFd.getFid(), field.getI8()); break;
        		case MamaFieldDescriptor.U8: newMsg.addU8(newFd.getName(), newFd.getFid(), field.getU8()); break;
        		case MamaFieldDescriptor.I16: newMsg.addI16(newFd.getName(), newFd.getFid(), field.getI16()); break;
        		case MamaFieldDescriptor.U16: newMsg.addU16(newFd.getName(), newFd.getFid(), field.getU16()); break;
        		case MamaFieldDescriptor.I32: newMsg.addI32(newFd.getName(), newFd.getFid(), field.getI32()); break;
        		case MamaFieldDescriptor.U32: newMsg.addU32(newFd.getName(), newFd.getFid(), field.getU32()); break;
        		case MamaFieldDescriptor.I64: newMsg.addI64(newFd.getName(), newFd.getFid(), field.getI64()); break;
        		case MamaFieldDescriptor.U64: newMsg.addU64(newFd.getName(), newFd.getFid(), field.getU64()); break;
        		case MamaFieldDescriptor.F32: newMsg.addF32(newFd.getName(), newFd.getFid(), field.getF32()); break;
        		case MamaFieldDescriptor.F64: newMsg.addF64(newFd.getName(), newFd.getFid(), field.getF64()); break;
        		case MamaFieldDescriptor.TIME: newMsg.addDateTime(newFd.getName(), newFd.getFid(), field.getDateTime()); break;
        		case MamaFieldDescriptor.DATETIME: newMsg.addDateTime(newFd.getName(), newFd.getFid(), field.getDateTime()); break;
        		case MamaFieldDescriptor.PRICE: newMsg.addPrice(newFd.getName(), newFd.getFid(), field.getPrice()); break;
				}
			}
		
			env = newEnv;
			msg = newMsg;							// discard old and use new
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	protected String getJmsTypeFromMamaType(MamaFieldDescriptor fd) {
		if (fd == null) return "Unknown";
		switch (fd.getType()) {
        case MamaFieldDescriptor.DATETIME: return "Calendar";
        case MamaFieldDescriptor.OPAQUE: return "byte[]";
        case MamaFieldDescriptor.STRING: return "String";
        case MamaFieldDescriptor.BOOL: return "boolean";
        case MamaFieldDescriptor.CHAR: return "char";
        case MamaFieldDescriptor.I8: return "byte";
        case MamaFieldDescriptor.U8: return "short";
        case MamaFieldDescriptor.I16: return "short";
        case MamaFieldDescriptor.U16: return "long";
        case MamaFieldDescriptor.I32: return "integer";
        case MamaFieldDescriptor.U32: return "long";
        case MamaFieldDescriptor.I64: return "long";
        case MamaFieldDescriptor.U64: return "long";
        case MamaFieldDescriptor.F32: return "float";
        case MamaFieldDescriptor.F64: return "double";
        case MamaFieldDescriptor.TIME: return "Calendar";		// TODO TIME and DATETIME ????
        case MamaFieldDescriptor.PRICE: return "double";
        default: return "Unknown";
		}
	}
	
	/**
	 * Return a string symbol, even if it is missing, used for logging.
	 * @return
	 * @throws JMSException
	 */
	protected String getSymbol() throws JMSException {
		String symbol = "noSymbol";
		try {
			if (topic != null) symbol = topic.getTopicName();
		} catch (JMSException ex) {
		}
		return symbol;
	}
	
	/**
	 * Check a field name against the dictionary and get a FieldDescriptor.
	 * @param name
	 * @return
	 * @throws JMSException
	 */
	// TODO check also here for valid type for the field being set
	protected MamaFieldDescriptor checkFieldName(String fieldName) throws JMSException {
		String symbol = getSymbol();
		if (fieldName == null) {
			throw new NullPointerException("Null field name for topic=" + symbol);
		}
		if (env == null) {
			throw new MessageFormatException("Env not found for topic=" + symbol + " field=" + fieldName);
		}
		if (msg == null) {
			throw new MessageFormatException("Message not found for topic=" + symbol + " field=" + fieldName);			
		}

		MamaFieldDescriptor fd = env.getFieldDescriptor(fieldName);
		if (fd == null) {
			throw new MessageFormatException("Field not found for topic=" + symbol + " field=" + fieldName + " type=" + getJmsTypeFromMamaType(fd));
		}
		return fd;
	}

	// --------------------------------------------------------------------------------------------

	/** byte
	 */
	@Override
	public byte getByte(String name) throws JMSException {
		return gets.getByte(name);
	}

	/** char
	 */
	@Override
	public char getChar(String name) throws JMSException {
		return gets.getChar(name);
	}

	/** short
	 */
	@Override
	public short getShort(String name) throws JMSException {
		return gets.getShort(name);
	}

	/** int
	 */
	@Override
	public int getInt(String name) throws JMSException {
		return gets.getInt(name);
	}

	/** long
	 */
	@Override
	public long getLong(String name) throws JMSException {
		return gets.getLong(name);
	}

	/** float
	 */
	@Override
	public float getFloat(String name) throws JMSException {
		return gets.getFloat(name);
	}

	/** double
	 */
	@Override
	public double getDouble(String name) throws JMSException {
		return gets.getDouble(name);
	}

	/** boolean
	 */
	@Override
	public boolean getBoolean(String name) throws JMSException {
		return gets.getBoolean(name);
	}

	/** byte[]
	 */
	@Override
	public byte[] getBytes(String name) throws JMSException {
		return gets.getBytes(name);
	}

	// ---------------------------------------------------------------------------------------
	
	/**
	 * Get all of the field name in this message.
	 */
	@Override
	public Enumeration<String> getMapNames() throws JMSException {
		try {
			ArrayList<String> v = new ArrayList<String>(msg.getNumFields());
			for (@SuppressWarnings("unchecked")
			Iterator<MamaMsgField> iterator = msg.iterator(); iterator.hasNext();) {
				MamaMsgField field = iterator.next();
				if (field == null) continue;
	
				int fid = field.getFid();
				String name = env.getFieldName(fid);
		
				if (name == null) {
					// This is not a normal thing, could be dictionary error
					System.err.println("getMapNames: null field name for topic=" + getSymbol() + " fid=" + fid);
					continue;
				}
				v.add(name);
			}
			return Collections.enumeration(v);
		} catch (Exception ex) {
			throw new JMSException("getMapNames: error for topic=" + getSymbol() + " msg=" + ex.getMessage());
		}
	}

	@Override
	public Object getObject(String name) throws JMSException {
		MamaFieldDescriptor fd = checkFieldName(name);
		// Mama.log(MamaLogLevel.NORMAL, "getObject: " + name + " " + MamaFieldDescriptor.getTypeName(fd.getType()) + " " + this.getJmsTypeFromMamaType(fd));
		switch (fd.getType()) {
		case MamaFieldDescriptor.TIME: {
			MamaDateTime mamaDateTime = msg.getDateTime(fd);
			MdsOmJmsCalendar mc = getCalendar();
			mc.setFromMamaDateTime(mamaDateTime);
			
			//if basic mode, return string of date
			//else return MdsOmJmsCalendar obj
			if (config.isBasicMode())
				return getFormattedDateTime(mc);
			else 
				return mc;						// return time obj
			
		}
		case MamaFieldDescriptor.PRICE: {
			MamaPrice mp = msg.getPrice(fd);
			if (config.isBasicMode()) {
				return new Double(mp.getValue());
			} else {
				MdsOmJmsPrice p = new MdsOmJmsPrice();
				p.setFromMamaPrice(mp);
				return p;
			}
		}
		case MamaFieldDescriptor.CHAR:
			return new Character(msg.getChar(fd));
		case MamaFieldDescriptor.BOOL:
			return new Boolean(msg.getBoolean(fd));
			
		case MamaFieldDescriptor.U8:
			return new Short(msg.getU8(fd));
		case MamaFieldDescriptor.I8:
			return new Byte(msg.getI8(fd));
			
		case MamaFieldDescriptor.U16:
			return new Integer(msg.getU16(fd));
		case MamaFieldDescriptor.I16:
			return new Short(msg.getI16(fd));
			
		case MamaFieldDescriptor.U32:
			return new Long(msg.getU32(fd));
		case MamaFieldDescriptor.I32:
			return new Integer(msg.getI32(fd));
			
		case MamaFieldDescriptor.U64:
			return new Long(msg.getU64(fd));
		case MamaFieldDescriptor.I64:
			return new Long(msg.getI64(fd));
			
		case MamaFieldDescriptor.F32:
			return new Float(msg.getF32(fd));
		case MamaFieldDescriptor.F64:
			return new Double(msg.getF64(fd));
			
		case MamaFieldDescriptor.OPAQUE:
			return msg.getOpaque(fd);			// return byte[] object
			
		case MamaFieldDescriptor.STRING:
			return msg.getString(fd);
			
		// This is most likely L2 data
		case MamaFieldDescriptor.VECTOR_MSG: {
			List<MapMessage> msgs = new ArrayList<MapMessage>();
			MamaMsg[] vMsgs = msg.getArrayMsg(fd);
			if (vMsgs != null) {
				for (int i = 0; i != vMsgs.length; i++) {
					MapMessageImpl map = (MapMessageImpl) session.createMapMessageFromPayload(env);
					map.setTopic(topic);
					MdsOmJmsMsgType.setMessageType(map, MdsOmJmsMsgType.getMessageType(this));
					MdsOmJmsMsgStatus.setMessageStatus(map, MdsOmJmsMsgStatus.getMessageStatus(this));
					map.setMamaMsg(vMsgs[i]);
					msgs.add(map);
				}
			}
			return msgs;
		}

		case MamaFieldDescriptor.MSG:
			// This is an embedded msg, probably level 2 data
			MamaMsg emsg = msg.getMsg(fd);
			MapMessageImpl map = (MapMessageImpl) session.createMapMessageFromPayload(env);
			map.setTopic(topic);
			MdsOmJmsMsgType.setMessageType(map, MdsOmJmsMsgType.getMessageType(this));
			MdsOmJmsMsgStatus.setMessageStatus(map, MdsOmJmsMsgStatus.getMessageStatus(this));
			map.setMamaMsg(emsg);
			return map;
			
		default:
			return null;
		}
	}
	
	/**
	 * Returns MdsOmJmsCalendar Object with configured formats
	 */
	private MdsOmJmsCalendar getCalendar(){
		return new MdsOmJmsCalendar(config);
	}
	
	/**
	 * Returns MdsOmJmsCalendar Object with configured formats
	 */
	private MdsOmJmsCalendar getCalendar(Calendar cal){
		return new MdsOmJmsCalendar(cal,config);
	}
	/**
	 * Returns 
	 */
	private String getFormattedDateTime(MdsOmJmsCalendar cal){		
		if(cal.hasDate() && cal.hasTime()){
			return config.getDateTimeFormat().format(cal.getDate());
		}
		else if(cal.hasDate()){
			return config.getDateFormat().format(cal.getDate());
		}
		else if(cal.hasTime()){
			return config.getTimeFormat().format(cal.getDate());
		}
		else
			return cal.toString();
	}
	@Override
	public String getString(String name) throws JMSException {
		MamaFieldDescriptor fd = checkFieldName(name);
		switch (fd.getType()) {
		case MamaFieldDescriptor.TIME:
			MamaDateTime mamaDateTime = msg.getDateTime(fd);
			MdsOmJmsCalendar mc = getCalendar();
			mc.setFromMamaDateTime(mamaDateTime);
			//Return formatted string as specified in MdsOmJmsConfig
			return getFormattedDateTime(mc);
		case MamaFieldDescriptor.PRICE:
			// TODO catch exceptions
			MamaPrice mp = msg.getPrice(fd);
			MdsOmJmsPrice p = new MdsOmJmsPrice();
			p.setFromMamaPrice(mp);
			return p.toString();
		case MamaFieldDescriptor.STRING:
			return msg.getString(fd);
		case MamaFieldDescriptor.CHAR:
			throw new MessageFormatException("getString: not valid for topic=" + getSymbol() + " field=" + name + " type=" + getJmsTypeFromMamaType(fd));
		case MamaFieldDescriptor.OPAQUE:
			throw new MessageFormatException("getString: not valid for topic=" + getSymbol() + " field=" + name + " type=" + getJmsTypeFromMamaType(fd));
		case MamaFieldDescriptor.I8:
		case MamaFieldDescriptor.U8:
		case MamaFieldDescriptor.I16:
		case MamaFieldDescriptor.U16:
		case MamaFieldDescriptor.I32:
		case MamaFieldDescriptor.U32:
		case MamaFieldDescriptor.I64:
			long l = msg.getI64(fd);
			return Long.toString(l);
		case MamaFieldDescriptor.U64:
			long l2 = msg.getU64(fd);
			return Long.toString(l2);
		case MamaFieldDescriptor.F32:
			float f = msg.getF32(fd);
			return Float.toString(f);
		case MamaFieldDescriptor.F64:
			double d = msg.getF64(fd);
			return Double.toString(d);
		default:
			try {
				String str = msg.getFieldAsString(fd.getFid(), null);
				// TODO Temporary fix for Solace which returns type:value
				if (env.getType() != MdsOmEnvType.SOLACE) {
					return str;
				} else {
					int ind = str.indexOf(':');
					if (ind == -1) return str;
					return str.substring(ind+1);
				}
			} catch (Exception ex) {
				throw new JMSException("getString: field not found for topic=" + getSymbol() + " field=" + name + " type=" + getJmsTypeFromMamaType(fd) + " ex=" + ex.getMessage());
			}
		}
	}

	/**
	 * Check if this field name exists in this message.
	 */
	@Override
	public boolean itemExists(String name) throws JMSException {
		if (name == null) {
			return false;
		}
		if (env == null) {
			return false;
		}
		try {
			MamaFieldDescriptor fd = env.getFieldDescriptor(name);
			if (fd == null) {
				return false;
			} else {
				MamaMsgField msgField = msg.getField("",  fd.getFid(), null);
				if (msgField == null) return false;
				return true;
			}
		} catch (Exception ex) {
			return false;
		}
	}

	@Override
	public void setBytes(String name, byte[] data, int offset, int length) throws JMSException {
		byte[] newb = new byte[length];
		System.arraycopy(data, offset, newb, 0, length);
		setBytes(name, newb);
	}

	// ---------------------------------------------------------------------------------------

	/** byte
	 */
	@Override
	public void setByte(String name, byte val) throws JMSException {
		sets.setByte(name, val);
	}

	/** short
	 */
	@Override
	public void setShort(String name, short val) throws JMSException {
		sets.setShort(name,  val);
	}

	/** int
	 */
	@Override
	public void setInt(String name, int val) throws JMSException {
		sets.setInt(name, val);
	}

	/** long
	 */
	@Override
	public void setLong(String name, long val) throws JMSException {
		sets.setLong(name,  val);
	}

	/** float
	 */
	@Override
	public void setFloat(String name, float val) throws JMSException {
		sets.setFloat(name, val);
	}

	/** double
	 */
	@Override
	public void setDouble(String name, double val) throws JMSException {
		sets.setDouble(name, val);
	}

	/** boolean
	 */
	@Override
	public void setBoolean(String name, boolean val) throws JMSException {
		sets.setBoolean(name, val);
	}

	/** byte[]
	 */
	@Override
	public void setBytes(String name, byte[] val) throws JMSException {
		sets.setBytes(name, val);
	}

	/** char
	 */
	@Override
	public void setChar(String name, char val) throws JMSException {
		sets.setChar(name, val);
	}

	// -------------------------------------------------------------------------------

	@Override
	public void setObject(String name, Object o) throws JMSException {
		MamaFieldDescriptor fd = null;
		try {
			// Handle all string cases here
			if (o instanceof String) {
				setString(name, (String) o);
				return;
			}
			
			fd = checkFieldName(name);
			switch (fd.getType()) {
			case MamaFieldDescriptor.TIME: {
				if (o instanceof MdsOmJmsCalendar) {
					MdsOmJmsCalendar mc = (MdsOmJmsCalendar) o;
					MamaDateTime mamaDateTime  = new MamaDateTime();
					mc.setToMamaDateTime(mamaDateTime);
					msg.addDateTime("", fd.getFid(), mamaDateTime);
				} else if (o instanceof Calendar) {
					Calendar cal = (Calendar) o;
					MdsOmJmsCalendar mc = getCalendar(cal);
					MamaDateTime mamaDateTime  = new MamaDateTime();
					mc.setToMamaDateTime(mamaDateTime);
					msg.addDateTime("", fd.getFid(), mamaDateTime);
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is TIME but object is not MdsOmJmsCalendar or Calendar");
				}
				break;
			}
			case MamaFieldDescriptor.PRICE: {
				if (o instanceof MdsOmJmsPrice) {
					MdsOmJmsPrice p = (MdsOmJmsPrice) o;
					MamaPrice mp = new MamaPrice();
					p.setToMamaPrice(mp);
					msg.addPrice("", fd.getFid(), mp);
				} else if (o instanceof Double) {
					setDouble(name, (Double) o);
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is PRICE but object is not MdsOmJmsPrice or Double");
				}
				break;
			}
			
			case MamaFieldDescriptor.CHAR:
				if (o instanceof Character) {
					msg.addChar("",  fd.getFid(), (Character) o);
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is CHAR but object is not Character");
				}
				break;
				
			case MamaFieldDescriptor.BOOL:
				if (o instanceof Boolean) {
					msg.addBoolean("", fd.getFid(), (Boolean) o);
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is BOOL but object is not Boolean");
				}
				break;
							
			case MamaFieldDescriptor.OPAQUE:
				if (o instanceof byte[]) {
					msg.addOpaque("", fd.getFid(), (byte[]) o);
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is OPAQUE but object is not byte[]");
				}
				break;
				
			// TODO this will never get called
			case MamaFieldDescriptor.STRING:
				if (o instanceof String) {
					msg.addString("", fd.getFid(), (String) o);
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is STRING but object is not String");
				}
				break;
				
			case MamaFieldDescriptor.U8:
				if (o instanceof Number) {
					msg.addU8("", fd.getFid(), ((Number) o).shortValue());
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is U8 but object is not Number");
				}
				break;
			case MamaFieldDescriptor.I8:
				if (o instanceof Number) {
					msg.addI8("", fd.getFid(), ((Number) o).byteValue());
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is I8 but object is not Number");
				}
				break;
				
			case MamaFieldDescriptor.U16:
				if (o instanceof Number) {
					msg.addU16("", fd.getFid(), ((Number) o).intValue());
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is U16 but object is not Number");
				}
				break;
			case MamaFieldDescriptor.I16:
				if (o instanceof Number) {
					msg.addI16("", fd.getFid(), ((Number) o).shortValue());
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is I16 but object is not Number");
				}
				break;
				
			case MamaFieldDescriptor.U32:
				if (o instanceof Number) {
					msg.addU32("", fd.getFid(), ((Number) o).longValue());
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is U32 but object is not Number");
				}
				break;
			case MamaFieldDescriptor.I32:
				if (o instanceof Number) {
					msg.addI32("", fd.getFid(), ((Number) o).intValue());
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is I32 but object is not Number");
				}
				break;
				
			case MamaFieldDescriptor.U64:
				if (o instanceof Number) {
					msg.addU64("", fd.getFid(), ((Number) o).longValue());
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is U64 but object is not Number");
				}
				break;
			case MamaFieldDescriptor.I64:
				if (o instanceof Number) {
					msg.addI64("", fd.getFid(), ((Number) o).longValue());
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is I64 but object is not Number");
				}
				break;
				
			case MamaFieldDescriptor.F32:
				if (o instanceof Number) {
					msg.addF32("", fd.getFid(), ((Number) o).floatValue());
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is F32 but object is not Number");
				}
				break;
			case MamaFieldDescriptor.F64:
				if (o instanceof Number) {
					msg.addF64("", fd.getFid(), ((Number) o).doubleValue());
				} else {
					throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Field is F64 but object is not Number");
				}
				break;
				
			default:
				// TODO add for each basic type
				break;
			}	
		} catch (MamaFieldTypeException e1) {
			throw new MessageFormatException("setObject: not valid for topic=" + getSymbol() + " field=" + name + " type=" + getJmsTypeFromMamaType(fd));
		} catch (MamaException e2) {
			throw new JMSException("setObject: error for topic=" + getSymbol() + " field=" + name + " type=" + getJmsTypeFromMamaType(fd) + " msg=" + e2.getMessage());
		}
	}

	@Override
	public void setString(String name, String val) throws JMSException {
		MamaFieldDescriptor fd = null;
		try {
			fd = checkFieldName(name);
			switch (fd.getType()) {
			case MamaFieldDescriptor.TIME: {
				MdsOmJmsCalendar mc = getCalendar();
				try {
					mc.set(val);
				} catch (ParseException e) {
					throw new MessageFormatException(getSymbol() + ":" + name + ": ex=" + e.getMessage());
				}
				MamaDateTime mamaDateTime  = new MamaDateTime();
				mc.setToMamaDateTime(mamaDateTime);
				msg.addDateTime("", fd.getFid(), mamaDateTime);
				break;
			}
			
			case MamaFieldDescriptor.PRICE:		// TODO set precision based on string
				msg.addPrice("", fd.getFid(), new MamaPrice(Double.valueOf(val)));
				break;
				
			case MamaFieldDescriptor.CHAR:
				throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Cannot set String into CHAR field");
				
			case MamaFieldDescriptor.BOOL:
				msg.addBoolean("", fd.getFid(), Boolean.valueOf(val));
				break;
							
			case MamaFieldDescriptor.OPAQUE:
				throw new MessageFormatException(getSymbol() + ":" + name + ": " + "Cannot set String into OPAQUE field");
				
			case MamaFieldDescriptor.STRING:
				msg.addString("", fd.getFid(), val);
				break;
				
			case MamaFieldDescriptor.U8:
				msg.addU8("", fd.getFid(), Short.valueOf(val));
				break;
				
			case MamaFieldDescriptor.I8:
				msg.addI8("", fd.getFid(), Byte.valueOf(val));
				break;
				
			case MamaFieldDescriptor.U16:
				msg.addU16("", fd.getFid(), Integer.valueOf(val));
				break;
				
			case MamaFieldDescriptor.I16:
				msg.addI16("", fd.getFid(), Short.valueOf(val));
				break;
				
			case MamaFieldDescriptor.U32:
				msg.addU32("", fd.getFid(), Long.valueOf(val));
				break;
				
			case MamaFieldDescriptor.I32:
				msg.addI32("", fd.getFid(), Integer.valueOf(val));
				break;
				
			case MamaFieldDescriptor.U64:
				msg.addU64("", fd.getFid(), Long.valueOf(val));
				break;
				
			case MamaFieldDescriptor.I64:
				msg.addI64("", fd.getFid(), Long.valueOf(val));
				break;
				
			case MamaFieldDescriptor.F32:
				msg.addF32("", fd.getFid(), Float.valueOf(val));
				break;
				
			case MamaFieldDescriptor.F64:
				msg.addF64("", fd.getFid(), Double.valueOf(val));
				break;
				
			default:
				throw new MessageFormatException(getSymbol() + ":" + name + ": " + "type=" + fd.getType() + " not supported by setString");
			}	
		} catch (MamaFieldTypeException e1) {
			throw new MessageFormatException("setString: not valid for topic=" + getSymbol() + " field=" + name + " type=" + getJmsTypeFromMamaType(fd));
		} catch (MamaException e2) {
			throw new JMSException("setString: error for topic=" + getSymbol() + " field=" + name + " type=" + getJmsTypeFromMamaType(fd) + " msg=" + e2.getMessage());
		}
	}
	
	// ---------------------------------------------------------------------
	
	@Override
	public void acknowledge() throws JMSException {
	}

	@Override
	public void clearBody() throws JMSException {
		if (msg != null) {
			msg.clear();
		}
	}

	// ----------------------------------------------------------------------
	@Override
	public String getJMSCorrelationID() throws JMSException {
		return null;
	}

	@Override
	public byte[] getJMSCorrelationIDAsBytes() throws JMSException {
		return null;
	}

	@Override
	public int getJMSDeliveryMode() throws JMSException {
		return 0;
	}

	@Override
	public Destination getJMSDestination() throws JMSException {
		return topic;
	}

	@Override
	public long getJMSExpiration() throws JMSException {
		return 0;
	}

	@Override
	public String getJMSMessageID() throws JMSException {
		return null;
	}

	@Override
	public int getJMSPriority() throws JMSException {
		return 0;
	}

	@Override
	public boolean getJMSRedelivered() throws JMSException {
		return false;
	}

	@Override
	public Destination getJMSReplyTo() throws JMSException {
		return null;
	}

	@Override
	public long getJMSTimestamp() throws JMSException {
		return 0;
	}

	@Override
	public String getJMSType() throws JMSException {
		return null;
	}

	// -----------------------------------------------------------------------------------
	@Override
	public void clearProperties() throws JMSException {
	}

	@Override
	public boolean getBooleanProperty(String arg0) throws JMSException {
		return false;
	}

	@Override
	public byte getByteProperty(String prop) throws JMSException {
		return 0;
	}

	@Override
	public double getDoubleProperty(String arg0) throws JMSException {
		return 0;
	}

	@Override
	public float getFloatProperty(String arg0) throws JMSException {
		return 0;
	}

	@Override
	public long getLongProperty(String arg0) throws JMSException {
		return 0;
	}

	@Override
	public Object getObjectProperty(String arg0) throws JMSException {
		return null;
	}

	@Override
	public Enumeration<String> getPropertyNames() throws JMSException {
		return null;
	}

	@Override
	public short getShortProperty(String arg0) throws JMSException {
		return 0;
	}

	@Override
	public int getIntProperty(String arg0) throws JMSException {
		return 0;
	}
	
	@Override
	public String getStringProperty(String prop) throws JMSException {
		return "";
	}

	@Override
	public boolean propertyExists(String arg0) throws JMSException {
		return false;
	}

	@Override
	public void setBooleanProperty(String arg0, boolean arg1)
			throws JMSException {
	}

	@Override
	public void setByteProperty(String prop, byte val) throws JMSException {
	}

	@Override
	public void setDoubleProperty(String arg0, double arg1) throws JMSException {
	}

	@Override
	public void setFloatProperty(String arg0, float arg1) throws JMSException {
	}

	@Override
	public void setIntProperty(String arg0, int arg1) throws JMSException {
	}

	@Override
	public void setLongProperty(String arg0, long arg1) throws JMSException {
	}

	@Override
	public void setObjectProperty(String arg0, Object arg1) throws JMSException {
	}

	@Override
	public void setShortProperty(String arg0, short arg1) throws JMSException {
	}

	@Override
	public void setStringProperty(String arg0, String arg1) throws JMSException {
	}

	// ------------------------------------------------------------------------
	@Override
	public void setJMSCorrelationID(String arg0) throws JMSException {
	}

	@Override
	public void setJMSCorrelationIDAsBytes(byte[] arg0) throws JMSException {
	}

	@Override
	public void setJMSDeliveryMode(int arg0) throws JMSException {
	}

	@Override
	public void setJMSDestination(Destination dest) throws JMSException {
		if (dest instanceof Topic) {
			topic = (Topic) dest;
		}
	}

	@Override
	public void setJMSExpiration(long arg0) throws JMSException {
	}

	@Override
	public void setJMSMessageID(String arg0) throws JMSException {
	}

	@Override
	public void setJMSPriority(int arg0) throws JMSException {
	}

	@Override
	public void setJMSRedelivered(boolean arg0) throws JMSException {
	}

	@Override
	public void setJMSReplyTo(Destination arg0) throws JMSException {
	}

	@Override
	public void setJMSTimestamp(long arg0) throws JMSException {
	}

	@Override
	public void setJMSType(String arg0) throws JMSException {
	}
}
