#!/bin/ksh
#

types="byte short int long float double boolean byte[] char"

# underlying java type:Java class:list of allowed types to get from underlying type
mtypes="
BOOL:Boolean:boolean:boolean,end
CHAR:Char:char:char,end
I8:I8:byte:byte,char,end
U8:U8:short:byte,char,short,end
I16:I16:short:byte,short,end
U16:U16:int:byte,short,int,end
I32:I32:int:byte,short,int,end
U32:U32:long:byte,short,int,long,end
I64:I64:long:byte,short,int,long,end
U64:U64:long:byte,short,int,long,end
F32:F32:float:byte,short,int,long,float,end
F64:F64:double:byte,short,int,long,float,double,end
STRING:String:String:byte,short,int,long,float,double,boolean,String,end
PRICE:Price:MamaPrice:double,end
OPAQUE:Opaque:byte[]:byte[],end
"

echo "
//
// Code generated by script gen_map_set.
// Do not change here, change in script.
//
package com.jpmorgan.mds.mercury.jms;

import javax.jms.JMSException;
import javax.jms.MessageFormatException;

import com.wombat.mama.MamaException;
import com.wombat.mama.MamaFieldDescriptor;
import com.wombat.mama.MamaFieldTypeException;
import com.wombat.mama.MamaPrice;

public class MapMessageSetImpl {
	private MapMessageImpl impl = null;
		
	protected MapMessageSetImpl(MapMessageImpl impl) {
		this.impl = impl;
	} "

for t in $types
do
	char=`echo $t | cut -c1`
	str=`echo $t | cut -c2-`
	char=`echo $char | awk '{print toupper($0)}'`
	ucase=$char""$str
	methodName="set"${ucase}
	if [ $methodName == "setByte[]" ]; then
		methodName="setBytes"
	fi

	echo ""
	echo "	/** $t"
	echo "	 */"
	echo "	public void ${methodName}(String name, $t val) throws JMSException {"
	echo "		MamaFieldDescriptor fd = null;"
	echo "		try {"
	echo "			fd = impl.checkFieldName(name);"
	echo "			switch (fd.getType()) {"

	for mt in $mtypes
	do
		sav=$IFS

		IFS=":"
		set -A tokens $mt
		fd=${tokens[0]}
		ft=${tokens[1]}
		jt=${tokens[2]}
		vs=${tokens[3]}

		IFS=","
		set -A vars $vs

		IFS=$sav

		found=0
		index=0
		while true
		do
			v=${vars[index]}
			index=`expr $index + 1`
			if [ $v == "end" ]; then
				break
			fi
			if [ $v == $t ]; then
				found=1
				break
			fi
		done

		if [ $found -eq 1 ]; then
			cast=""
			if [ $jt != $t ]; then
				cast="($jt) "
			fi
			echo "			case MamaFieldDescriptor.$fd:"
			if [ $fd == "STRING" ]; then
				echo "				impl.getMsg().addString(\"\", fd.getFid(), String.valueOf(val));"
			elif [ $fd == "PRICE" ]; then
				echo "				MamaPrice mp = new MamaPrice();"
				echo "				mp.setValue((double) val);"
				echo "				impl.getMsg().addPrice(\"\", fd.getFid(), mp);"
			else
				echo "				impl.getMsg().add${ft}(\"\", fd.getFid(), ${cast}val);"
			fi
			echo "				break;"
		fi
	done

	echo "			default:"
	echo "				throw new MessageFormatException(\"$methodName: not valid for topic=\" + impl.getSymbol() + \" field=\" + name + \" type=\" + impl.getJmsTypeFromMamaType(fd));"
	echo "			}"
	echo "		} catch (MamaFieldTypeException e1) {"
	echo "			throw new MessageFormatException(\"$methodName: not valid for topic=\" + impl.getSymbol() + \" field=\" + name + \" type=\" + impl.getJmsTypeFromMamaType(fd));"
	echo "		} catch (MamaException e2) {"
	echo "			throw new JMSException(\"$methodName: error for topic=\" + impl.getSymbol() + \" field=\" + name + \" type=\" + impl.getJmsTypeFromMamaType(fd) + \" impl.getMsg()=\" + e2.getMessage());"
	echo "		}"
	echo "	}"
done

echo "}"
echo ""

exit 0

