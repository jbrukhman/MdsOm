#!/bin/ksh
#

types="byte char short int long float double boolean byte[]"

matches="
BOOL:Boolean
CHAR:Char
U8:U8
I8:I8
U16:U16
I16:I16
U32:U32
I32:I32
I64:I64
U64:U64
F32:F32
F64:F64
STRING:String
PRICE:Price
OPAQUE:Opaque
"

# underlying java type:Java class:list of allowed types to get from underlying type
mtypes="
boolean:Boolean:BOOL,STRING,end
char:Character:CHAR,end
byte:Byte:I8,STRING,end
short:Short:I8,U8,I16,STRING,end
int:Integer:I8,U8,I16,U16,I32,STRING,end
long:Long:I8,U8,I16,U16,I32,U32,I64,U64,STRING,end
float:Float:F32,STRING,end
double:Double:F32,F64,PRICE,STRING,end
byte[]:Bytes:OPAQUE,end
"

echo "
//
// Code generated by script gen_map_get.
// Do not change here, change in script.
//
package com.jpmorgan.mds.mercury.jms;

import javax.jms.JMSException;
import javax.jms.MessageFormatException;

import com.wombat.mama.MamaException;
import com.wombat.mama.MamaFieldDescriptor;
import com.wombat.mama.MamaFieldTypeException;
import com.wombat.mama.MamaPrice;

public class MapMessageGetImpl {
	private MapMessageImpl impl = null;
		
	protected MapMessageGetImpl(MapMessageImpl impl) {
		this.impl = impl;
	} "

for t in $types
do
	char=`echo $t | cut -c1`
	str=`echo $t | cut -c2-`
	char=`echo $char | awk '{print toupper($0)}'`
	ucase=$char""$str
	methodName="get"${ucase}
	if [ $methodName == "getByte[]" ]; then
		methodName="getBytes"
	fi

	echo ""
	echo "	/** $t"
	echo "	 * Code generated by script gen_map_get."
	echo "	 * Do not change here, change in script."
	echo "	 */"
	echo "	public $t ${methodName}(String name) throws JMSException {"
	echo "		MamaFieldDescriptor fd = null;"
	echo "		try {"
	echo "			fd = impl.checkFieldName(name);"
	echo "			switch (fd.getType()) {"

	for mt in $mtypes
	do
		sav=$IFS
		IFS=":"
		set -A tokens $mt
		tt=${tokens[0]}
		javaClass=${tokens[1]}
		fds=${tokens[2]}
		IFS=$sav

		# Look for same type in mtypes list
		if [ $t != $tt ]; then
			continue
		fi

		sav=$IFS
		IFS=","
		set -A vars $fds
		IFS=$sav

		# Now loop over Mama types
		found=0
		index=0
		while true
		do
			fd=${vars[index]}
			index=`expr $index + 1`
			if [ $fd == "end" ]; then
				break
			fi

			for match in $matches
			do
				sav=$IFS
				IFS=":"
				set -A mts $match
				mamaType=${mts[0]}
				ft=${mts[1]}
				omMethod=$ft
				IFS=$sav
				if [ $mamaType == $fd ]; then
					break
				fi
			done

			echo "			case MamaFieldDescriptor.$fd:"
			if [ $fd == "STRING" ]; then
				echo "				String sval = impl.getMsg().getString(fd);"
				echo "				if (sval == null) throw new MessageFormatException(\"$methodName: not valid for topic=\" + impl.getSymbol() + \" field=\" + name + \" type=\" + impl.getJmsTypeFromMamaType(fd));"
				echo "				else return ${javaClass}.valueOf(sval);"
			elif [ $fd == "PRICE" ]; then
				echo "				MamaPrice pval = impl.getMsg().getPrice(fd);"
				echo "				if (pval == null) throw new MessageFormatException(\"$methodName: not valid for topic=\" + impl.getSymbol() + \" field=\" + name + \" type=\" + impl.getJmsTypeFromMamaType(fd));"
				echo "				else return pval.getValue();"
			else
				echo "				return impl.getMsg().get${omMethod}(fd);"
			fi
		done
	done

	echo "			default:"
	echo "				throw new MessageFormatException(\"$methodName: not valid for topic=\" + impl.getSymbol() + \" field=\" + name + \" type=\" + impl.getJmsTypeFromMamaType(fd));"
	echo "			}"
	echo "		} catch (MamaFieldTypeException e1) {"
	echo "			throw new MessageFormatException(\"$methodName: not valid for topic=\" + impl.getSymbol() + \" field=\" + name + \" type=\" + impl.getJmsTypeFromMamaType(fd));"
	echo "		} catch (MamaException e2) {"
	echo "			throw new JMSException(\"$methodName: error for topic=\" + impl.getSymbol() + \" field=\" + name + \" type=\" + impl.getJmsTypeFromMamaType(fd) + \" impl.getMsg()=\" + e2.getMessage());"
	echo "		}"
	echo "	}"
done

echo "}"
echo ""

exit 0

